<?php
/*
 * MODX Revolution
 *
 * Copyright 2006-2012 by MODX, LLC.
 *
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA
 *
 */

use PHPUnit\Framework\TestSuite;

/**
 * Abstract controller class for modRestService; all REST controllers must extend this class to be properly
 * implemented.
 *
 * @package modx
 * @subpackage rest
 */
abstract class modCrontabControllerPhpUnit extends modCrontabController
{
    public $pathVendor = MODX_BASE_PATH . 'vendor/autoload.php';
    public $pathTests = MODX_BASE_PATH . 'tests/';

    public function initialize()
    {
        $response = $this->loadClassPhpUnit();
        if ($response !== true) {
            $this->modx->log(modX::LOG_LEVEL_ERROR, "Error load " . $response, '', __METHOD__, __FILE__, __LINE__);
            return false;
        }
        return parent::initialize(); // TODO: Change the autogenerated stub
    }


    /**
     * Загрузка основных классов
     * @return bool
     */
    private function loadClassPhpUnit()
    {
        $response = $this->loadVendorAutoload();
        if ($response !== true) {
            return $response;
        }
        $response = $this->loadHarness();
        if ($response !== true) {
            return $response;
        }
        if (!file_exists($this->pathTests)) {
            return 'Директория с тестами не найден ' . $this->pathTests;
        }
        return true;
    }

    /**
     * Загрузка composer
     * @return bool
     */
    private function loadVendorAutoload()
    {
        if (!file_exists($this->pathVendor)) {
            return "Не удалось загрузить " . $this->pathVendor;
        }
        include_once $this->pathVendor;
        return true;
    }

    /**
     * Загрузка modx для phpunit тестов
     * @return bool
     */
    private function loadHarness()
    {
        $root = dirname(dirname(__FILE__)) . '/phpunit/MODxTestHarness.php';
        if (!file_exists($root)) {
            return 'не удалось загрузить класс для MODxTestHarness';
        }
        include_once $root;
        return true;
    }


    /**
     * Запускает тест
     * @param $name
     * @return array|string
     * @throws ReflectionException
     */
    public function runTest($name)
    {
        $classTest = $this->pathTests . ltrim($name, '/') . '.php';
        if (!file_exists($classTest)) {
            return 'Тест не найден';
        }
        include_once $classTest;
        $tmp = explode('/', $name);
        $nameClass = array_pop($tmp);

        if (!class_exists($nameClass)) {
            return 'Не удалось загрузить класс ' . $nameClass;
        }

        $testClass = new ReflectionClass($nameClass);
        $errors = null;

        $test = new TestSuite();
        $test->addTestSuite($testClass);
        $result = $test->run();

        if ($result->failureCount() > 0) {
            $this->print_msg('ERROR');
            foreach ($result->failures() as $key => $failure) {
                $name = $failure->getTestName();
                $msg = $failure->exceptionMessage();
                $this->print_msg('❌ ' . $name . ' ❯❯❯❯❯❯❯❯ ' . $msg);
                $errors[] = [
                    'name' => $name,
                    'msg' => $msg,
                ];
            }
        }
        if (count($result->passed()) > 0) {
            $this->print_msg('SUCCESS');
            foreach ($result->passed() as $class => $item) {
                $this->print_msg(' ✅ ❯❯❯❯ ' . $class);
            }
        }
        $this->print_msg('------------------------');
        return $errors;
    }
}
